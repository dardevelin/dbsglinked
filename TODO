# TODO LIST

--------------- changes made in version 0.0.5 + 0.0.6 + 0.0.7
DONE:- Add to libglinked_list_t function pointer for an allocator and a deallocator
  this should make easy to integrate the list into projects that
  use a custom (de)allocator. these functions will be used to create and delete 
  libglinked_node_t structures
DONE↓:- add function to set libglinked_list_t function pointers. //changed to
    →- modify libglinked_init_list to receive a (de)allocator
DONE:- update libglinked_create_node to receive the list since the list contains
  the allocator and deallocator of the node structure
DONE: - update libglinked_delete_node and libglinked_delete_list to use the list as means
  to use the correct node structures deallocators of that list
---------------

-------------- changes made in version 0.0.4
DONE: - update node structure to contain the data deallocator
DONE: - update libglinked_create_node to receive a data deallocator
        null is used to identify that doesn't require deallocation
DONE: - update libglinked_delete_node and libglinked_delete_list
        to not require a deallocator for data
---------------

--------------- changes made in version 0.0.3
DONE: - modify libglinked_create_node to not allocate or copy data to node->data.
  the function will just simply point node->data to the data passed by the user,
  this way is up to the user to handle the data.
---------------

--------------- added in version 0.0.2
DONE: - Modify libglinked_delete_node and libglinked_delete_list to use a 
  user define function to delete the node data 
---------------

- add function like foreach over the list
- add split function
- add join function
- add find function

- possibly add fast append capabilities

- Try make deb package for debian

- See if the code needs more comments
  
- Implement search and friends, 

{
- maybe add an Identifier to the items, this way a user could define types and use the list
  as a really generic type one.
 
- if the previous mentioned features gets in, 
	* implement sort, by key/identifier/type
	* implement remove function for specific elements
        * insert elements according to key/id/type rules
        * ways to define rules
}

